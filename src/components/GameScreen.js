import React, { useState, useEffect, useMemo, useCallback } from 'react';
import SpeakerIcon from './SpeakerIcon';
import TransparentImage from './TransparentImage';
import './GameScreen.css';

/**
 * –£–ª—å—Ç—Ä–∞-–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –∏–≥—Ä—ã
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω-–≥—Ä–∞–¥–∏–µ–Ω—Ç, –∏–∫–æ–Ω–∫—É –∫–æ–ª–æ–Ω–∫–∏ –∏ –¥–≤–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} contentPack - –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–∞–∫–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
 * @param {Function} onBack - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
const GameScreen = ({ contentPack, onBack }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const [currentTask, setCurrentTask] = useState(0);
  // –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  const [selectedChoice, setSelectedChoice] = useState(null);
  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
  const [showResult, setShowResult] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  const [isPlaying, setIsPlaying] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const [isCompleted, setIsCompleted] = useState(false);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
  const tasks = useMemo(() => contentPack?.tasks || [], [contentPack?.tasks]);
  // –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
  const task = tasks[currentTask];

  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–∞–∫–∞
   */
  useEffect(() => {
    setCurrentTask(0);
    setSelectedChoice(null);
    setShowResult(false);
    setIsPlaying(false);
    setIsCompleted(false);
  }, [contentPack?.id]);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  useEffect(() => {
    return () => {
      speechSynthesis.cancel();
    };
  }, []);

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
   */
  const playTextToSpeech = useCallback(() => {
    if (!('speechSynthesis' in window) || !task?.question_text) {
      setIsPlaying(false);
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
    speechSynthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(task.question_text);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π
    utterance.lang = 'ru-RU';
    utterance.rate = 0.7;
    utterance.pitch = 1.3;
    utterance.volume = 1;

    utterance.onend = () => setIsPlaying(false);
    utterance.onerror = () => setIsPlaying(false);

    speechSynthesis.speak(utterance);
  }, [task?.question_text]);

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ –∑–∞–¥–∞–Ω–∏—è
   */
  useEffect(() => {
    if (task && !showResult) {
      const timer = setTimeout(() => {
        setIsPlaying(true);
        if (task?.audio_url) {
          const audio = new Audio(task.audio_url);
          audio.onended = () => setIsPlaying(false);
          audio.onerror = () => playTextToSpeech();
          audio.play().catch(() => playTextToSpeech());
        } else {
          playTextToSpeech();
        }
      }, 500);

      return () => clearTimeout(timer);
    }
  }, [currentTask, task, showResult, playTextToSpeech]);

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å–∞ (—Ñ–∞–π–ª –∏–ª–∏ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏)
   */
  const playAudio = () => {
    if (isPlaying) {
      speechSynthesis.cancel();
      setIsPlaying(false);
      return;
    }

    setIsPlaying(true);

    if (task?.audio_url) {
      const audio = new Audio(task.audio_url);
      audio.onended = () => setIsPlaying(false);
      audio.onerror = () => playTextToSpeech();
      audio.play().catch(() => playTextToSpeech());
    } else {
      playTextToSpeech();
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
   * @param {number} choiceIndex - –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  const handleChoice = (choiceIndex) => {
    if (selectedChoice !== null || !task) return;

    setSelectedChoice(choiceIndex);
    setShowResult(true);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      const isLastQuestion = currentTask >= tasks.length - 1;
      
      if (!isLastQuestion) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        setCurrentTask(prev => prev + 1);
        setSelectedChoice(null);
        setShowResult(false);
      } else {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        setIsCompleted(true);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          onBack();
        }, 2000);
      }
    }, 1500);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è
  if (!task && !isCompleted) {
    return <div className="game-screen" />;
  }

  // –≠–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  if (isCompleted) {
    return (
      <div className="game-screen">
        <button className="back-button" onClick={onBack}>‚Üê</button>
        <div className="completion-message">
          <div className="completion-text">–ú–æ–ª–æ–¥–µ—Ü! üéâ</div>
          <div className="completion-subtext">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</div>
        </div>
      </div>
    );
  }

  const choices = task.choices || [];

  return (
    <div className="game-screen">
      {/* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
      <button className="back-button" onClick={onBack}>‚Üê</button>

      {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
      <SpeakerIcon 
        onClick={playAudio}
        isPlaying={isPlaying}
      />

      {/* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
      {tasks.length > 1 && (
        <div className="progress-indicator">
          {currentTask + 1} / {tasks.length}
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
      <div className="choice-container">
        {choices.slice(0, 2).map((choice, index) => (
          <TransparentImage
            key={`${currentTask}-${index}`}
            src={choice.image_url}
            alt={choice.text || `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}`}
            onClick={() => handleChoice(index)}
            isCorrect={index === task.correct_choice}
            isSelected={selectedChoice === index}
            showResult={showResult}
          />
        ))}
      </div>
    </div>
  );
};

export default GameScreen;